const base64_code = "./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split("");
const index_64 = new Uint8Array([
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  0,
  1,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  -1,
  -1,
  -1,
  -1,
  -1
]);
export function encode(d, len) {
  let off = 0;
  let rs = [];
  let c1 = 0;
  let c2 = 0;
  while(off < len){
    c1 = d[off++] & 0xff;
    rs.push(base64_code[c1 >> 2 & 0x3f]);
    c1 = (c1 & 0x03) << 4;
    if (off >= len) {
      rs.push(base64_code[c1 & 0x3f]);
      break;
    }
    c2 = d[off++] & 0xff;
    c1 |= c2 >> 4 & 0x0f;
    rs.push(base64_code[c1 & 0x3f]);
    c1 = (c2 & 0x0f) << 2;
    if (off >= len) {
      rs.push(base64_code[c1 & 0x3f]);
      break;
    }
    c2 = d[off++] & 0xff;
    c1 |= c2 >> 6 & 0x03;
    rs.push(base64_code[c1 & 0x3f]);
    rs.push(base64_code[c2 & 0x3f]);
  }
  return rs.join("");
}
// x is a single character
function char64(x) {
  if (x.length > 1) {
    throw new Error("Expected a single character");
  }
  let characterAsciiCode = x.charCodeAt(0);
  if (characterAsciiCode < 0 || characterAsciiCode > index_64.length) return -1;
  return index_64[characterAsciiCode];
}
export function decode(s, maxolen) {
  let rs = [];
  let off = 0;
  let slen = s.length;
  let olen = 0;
  let ret;
  let c1, c2, c3, c4, o;
  if (maxolen <= 0) throw new Error("Invalid maxolen");
  while(off < slen - 1 && olen < maxolen){
    c1 = char64(s.charAt(off++));
    c2 = char64(s.charAt(off++));
    if (c1 === -1 || c2 === -1) break;
    o = c1 << 2;
    o |= (c2 & 0x30) >> 4;
    rs.push(o);
    if (++olen >= maxolen || off >= slen) break;
    c3 = char64(s.charAt(off++));
    if (c3 === -1) break;
    o = (c2 & 0x0f) << 4;
    o |= (c3 & 0x3c) >> 2;
    rs.push(o);
    if (++olen >= maxolen || off >= slen) break;
    c4 = char64(s.charAt(off++));
    o = (c3 & 0x03) << 6;
    o |= c4;
    rs.push(o);
    ++olen;
  }
  ret = new Uint8Array(olen);
  for(off = 0; off < olen; off++)ret[off] = rs[off];
  return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvYmNyeXB0QHYwLjQuMS9zcmMvYmNyeXB0L2Jhc2U2NC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiYXNlNjRfY29kZSA9XG4gIFwiLi9BQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiLnNwbGl0KFxuICAgIFwiXCIsXG4gICk7XG5cbmNvbnN0IGluZGV4XzY0ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgMCxcbiAgMSxcbiAgNTQsXG4gIDU1LFxuICA1NixcbiAgNTcsXG4gIDU4LFxuICA1OSxcbiAgNjAsXG4gIDYxLFxuICA2MixcbiAgNjMsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAyLFxuICAzLFxuICA0LFxuICA1LFxuICA2LFxuICA3LFxuICA4LFxuICA5LFxuICAxMCxcbiAgMTEsXG4gIDEyLFxuICAxMyxcbiAgMTQsXG4gIDE1LFxuICAxNixcbiAgMTcsXG4gIDE4LFxuICAxOSxcbiAgMjAsXG4gIDIxLFxuICAyMixcbiAgMjMsXG4gIDI0LFxuICAyNSxcbiAgMjYsXG4gIDI3LFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAyOCxcbiAgMjksXG4gIDMwLFxuICAzMSxcbiAgMzIsXG4gIDMzLFxuICAzNCxcbiAgMzUsXG4gIDM2LFxuICAzNyxcbiAgMzgsXG4gIDM5LFxuICA0MCxcbiAgNDEsXG4gIDQyLFxuICA0MyxcbiAgNDQsXG4gIDQ1LFxuICA0NixcbiAgNDcsXG4gIDQ4LFxuICA0OSxcbiAgNTAsXG4gIDUxLFxuICA1MixcbiAgNTMsXG4gIC0xLFxuICAtMSxcbiAgLTEsXG4gIC0xLFxuICAtMSxcbl0pO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKGQ6IFVpbnQ4QXJyYXksIGxlbjogbnVtYmVyKTogc3RyaW5nIHtcbiAgbGV0IG9mZiA9IDA7XG4gIGxldCByczogc3RyaW5nW10gPSBbXTtcbiAgbGV0IGMxID0gMDtcbiAgbGV0IGMyID0gMDtcblxuICB3aGlsZSAob2ZmIDwgbGVuKSB7XG4gICAgYzEgPSBkW29mZisrXSAmIDB4ZmY7XG4gICAgcnMucHVzaChiYXNlNjRfY29kZVsoYzEgPj4gMikgJiAweDNmXSk7XG4gICAgYzEgPSAoYzEgJiAweDAzKSA8PCA0O1xuICAgIGlmIChvZmYgPj0gbGVuKSB7XG4gICAgICBycy5wdXNoKGJhc2U2NF9jb2RlW2MxICYgMHgzZl0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGMyID0gZFtvZmYrK10gJiAweGZmO1xuICAgIGMxIHw9IChjMiA+PiA0KSAmIDB4MGY7XG4gICAgcnMucHVzaChiYXNlNjRfY29kZVtjMSAmIDB4M2ZdKTtcbiAgICBjMSA9IChjMiAmIDB4MGYpIDw8IDI7XG4gICAgaWYgKG9mZiA+PSBsZW4pIHtcbiAgICAgIHJzLnB1c2goYmFzZTY0X2NvZGVbYzEgJiAweDNmXSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYzIgPSBkW29mZisrXSAmIDB4ZmY7XG4gICAgYzEgfD0gKGMyID4+IDYpICYgMHgwMztcbiAgICBycy5wdXNoKGJhc2U2NF9jb2RlW2MxICYgMHgzZl0pO1xuICAgIHJzLnB1c2goYmFzZTY0X2NvZGVbYzIgJiAweDNmXSk7XG4gIH1cbiAgcmV0dXJuIHJzLmpvaW4oXCJcIik7XG59XG5cbi8vIHggaXMgYSBzaW5nbGUgY2hhcmFjdGVyXG5mdW5jdGlvbiBjaGFyNjQoeDogc3RyaW5nKTogbnVtYmVyIHtcbiAgaWYgKHgubGVuZ3RoID4gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGEgc2luZ2xlIGNoYXJhY3RlclwiKTtcbiAgfVxuXG4gIGxldCBjaGFyYWN0ZXJBc2NpaUNvZGUgPSB4LmNoYXJDb2RlQXQoMCk7XG5cbiAgaWYgKGNoYXJhY3RlckFzY2lpQ29kZSA8IDAgfHwgY2hhcmFjdGVyQXNjaWlDb2RlID4gaW5kZXhfNjQubGVuZ3RoKSByZXR1cm4gLTE7XG4gIHJldHVybiBpbmRleF82NFtjaGFyYWN0ZXJBc2NpaUNvZGVdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKHM6IHN0cmluZywgbWF4b2xlbjogbnVtYmVyKTogVWludDhBcnJheSB7XG4gIGxldCByczogbnVtYmVyW10gPSBbXTtcbiAgbGV0IG9mZiA9IDA7XG4gIGxldCBzbGVuID0gcy5sZW5ndGg7XG4gIGxldCBvbGVuID0gMDtcbiAgbGV0IHJldDogVWludDhBcnJheTtcbiAgbGV0IGMxLCBjMiwgYzMsIGM0LCBvO1xuXG4gIGlmIChtYXhvbGVuIDw9IDApIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbWF4b2xlblwiKTtcblxuICB3aGlsZSAob2ZmIDwgc2xlbiAtIDEgJiYgb2xlbiA8IG1heG9sZW4pIHtcbiAgICBjMSA9IGNoYXI2NChzLmNoYXJBdChvZmYrKykpO1xuICAgIGMyID0gY2hhcjY0KHMuY2hhckF0KG9mZisrKSk7XG4gICAgaWYgKGMxID09PSAtMSB8fCBjMiA9PT0gLTEpIGJyZWFrO1xuICAgIG8gPSBjMSA8PCAyO1xuICAgIG8gfD0gKGMyICYgMHgzMCkgPj4gNDtcbiAgICBycy5wdXNoKG8pO1xuICAgIGlmICgrK29sZW4gPj0gbWF4b2xlbiB8fCBvZmYgPj0gc2xlbikgYnJlYWs7XG4gICAgYzMgPSBjaGFyNjQocy5jaGFyQXQob2ZmKyspKTtcbiAgICBpZiAoYzMgPT09IC0xKSBicmVhaztcbiAgICBvID0gKGMyICYgMHgwZikgPDwgNDtcbiAgICBvIHw9IChjMyAmIDB4M2MpID4+IDI7XG4gICAgcnMucHVzaChvKTtcbiAgICBpZiAoKytvbGVuID49IG1heG9sZW4gfHwgb2ZmID49IHNsZW4pIGJyZWFrO1xuICAgIGM0ID0gY2hhcjY0KHMuY2hhckF0KG9mZisrKSk7XG4gICAgbyA9IChjMyAmIDB4MDMpIDw8IDY7XG4gICAgbyB8PSBjNDtcbiAgICBycy5wdXNoKG8pO1xuICAgICsrb2xlbjtcbiAgfVxuXG4gIHJldCA9IG5ldyBVaW50OEFycmF5KG9sZW4pO1xuICBmb3IgKG9mZiA9IDA7IG9mZiA8IG9sZW47IG9mZisrKSByZXRbb2ZmXSA9IHJzW29mZl07XG4gIHJldHVybiByZXQ7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxjQUNKLG1FQUFtRSxLQUFLLENBQ3RFO0FBR0osTUFBTSxXQUFXLElBQUksV0FBVztFQUM5QixDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFDRCxDQUFDO0VBQ0QsQ0FBQztFQUNELENBQUM7RUFD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