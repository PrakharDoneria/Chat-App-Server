import { lookup, path } from "../deps.ts";
export class Response {
  status = 200;
  headers = new Headers();
  body;
  resources = [];
  toHttpResponse() {
    let { status = 200, headers, body = new Uint8Array(0) } = this;
    if (typeof body === "string") {
      body = new TextEncoder().encode(body);
      if (!headers.has("Content-Type")) {
        headers.append("Content-Type", "text/plain");
      }
    }
    return {
      status,
      headers,
      body
    };
  }
  close() {
    for (const resource of this.resources)resource.close();
  }
  empty(status) {
    this.status = status;
    this.body = "";
  }
  json(json) {
    this.headers.append("Content-Type", "application/json");
    this.body = JSON.stringify(json);
  }
  send(text) {
    this.headers.append("Content-Type", "text/plain");
    this.body = text;
  }
  async file(filePath, transform) {
    // console.log("filepath: ", filePath)
    const extname = path.extname(filePath);
    // console.log("extname: ", extname)
    const contentType = lookup(extname.slice(1)) || "";
    const fileInfo = await Deno.stat(filePath);
    if (!fileInfo.isFile || !contentType) {
      return;
    }
    this.headers.append("Content-Type", contentType);
    if (transform) {
      const bytes = await Deno.readFile(filePath);
      let str = new TextDecoder().decode(bytes);
      str = transform(str);
      this.body = new TextEncoder().encode(str);
    } else {
      const file = await Deno.open(filePath);
      this.resources.push(file);
      this.body = file;
    }
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9OTWF0aGFyL2Rlbm8tZXhwcmVzcy9tYXN0ZXIvc3JjL1Jlc3BvbnNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RW5kSGFuZGxlciwgSnNvbn0gZnJvbSBcIi4uL3R5cGVzL2luZGV4LnRzXCJcbmltcG9ydCB7aHR0cCwgbG9va3VwLCBwYXRofSBmcm9tIFwiLi4vZGVwcy50c1wiXG5cbmV4cG9ydCBjbGFzcyBSZXNwb25zZSB7XG4gICAgc3RhdHVzID0gMjAwXG4gICAgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgICBib2R5Pzogc3RyaW5nIHwgVWludDhBcnJheSB8IERlbm8uUmVhZGVyXG4gICAgcmVzb3VyY2VzOiBEZW5vLkNsb3NlcltdID0gW11cblxuICAgIHRvSHR0cFJlc3BvbnNlKCk6IGh0dHAuUmVzcG9uc2Uge1xuICAgICAgICBsZXQge3N0YXR1cyA9IDIwMCwgaGVhZGVycywgYm9keSA9IG5ldyBVaW50OEFycmF5KDApfSA9IHRoaXNcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBib2R5ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGJvZHkpXG4gICAgICAgICAgICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJ0ZXh0L3BsYWluXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtzdGF0dXMsIGhlYWRlcnMsIGJvZHl9XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgdGhpcy5yZXNvdXJjZXMpIHJlc291cmNlLmNsb3NlKClcbiAgICB9XG5cbiAgICBlbXB0eShzdGF0dXM6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1c1xuICAgICAgICB0aGlzLmJvZHkgPSBcIlwiXG4gICAgfVxuXG4gICAganNvbihqc29uOiBKc29uKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpXG4gICAgICAgIHRoaXMuYm9keSA9IEpTT04uc3RyaW5naWZ5KGpzb24pXG4gICAgfVxuXG4gICAgc2VuZCh0ZXh0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLCBcInRleHQvcGxhaW5cIilcbiAgICAgICAgdGhpcy5ib2R5ID0gdGV4dFxuICAgIH1cblxuICAgIGFzeW5jIGZpbGUoXG4gICAgICAgIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgICAgIHRyYW5zZm9ybT86IChzcmM6IHN0cmluZykgPT4gc3RyaW5nXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZmlsZXBhdGg6IFwiLCBmaWxlUGF0aClcbiAgICAgICAgY29uc3QgZXh0bmFtZTogc3RyaW5nID0gcGF0aC5leHRuYW1lKGZpbGVQYXRoKVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImV4dG5hbWU6IFwiLCBleHRuYW1lKVxuICAgICAgICBjb25zdCBjb250ZW50VHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gbG9va3VwKGV4dG5hbWUuc2xpY2UoMSkpIHx8IFwiXCJcbiAgICAgICAgY29uc3QgZmlsZUluZm8gPSBhd2FpdCBEZW5vLnN0YXQoZmlsZVBhdGgpXG4gICAgICAgIGlmICghZmlsZUluZm8uaXNGaWxlIHx8ICFjb250ZW50VHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oZWFkZXJzLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLCBjb250ZW50VHlwZSlcbiAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBhd2FpdCBEZW5vLnJlYWRGaWxlKGZpbGVQYXRoKVxuICAgICAgICAgICAgbGV0IHN0ciA9IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShieXRlcylcbiAgICAgICAgICAgIHN0ciA9IHRyYW5zZm9ybShzdHIpXG4gICAgICAgICAgICB0aGlzLmJvZHkgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IGF3YWl0IERlbm8ub3BlbihmaWxlUGF0aClcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzLnB1c2goZmlsZSlcbiAgICAgICAgICAgIHRoaXMuYm9keSA9IGZpbGVcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxTQUFjLE1BQU0sRUFBRSxJQUFJLFFBQU8sYUFBWTtBQUU3QyxPQUFPLE1BQU07RUFDVCxTQUFTLElBQUc7RUFDWixVQUFVLElBQUksVUFBUztFQUN2QixLQUF3QztFQUN4QyxZQUEyQixFQUFFLENBQUE7RUFFN0IsaUJBQWdDO0lBQzVCLElBQUksRUFBQyxTQUFTLEdBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxJQUFJLFdBQVcsRUFBRSxFQUFDLEdBQUcsSUFBSTtJQUM1RCxJQUFJLE9BQU8sU0FBUyxVQUFVO01BQzFCLE9BQU8sSUFBSSxjQUFjLE1BQU0sQ0FBQztNQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsaUJBQWlCO1FBQzlCLFFBQVEsTUFBTSxDQUFDLGdCQUFnQjtNQUNuQztJQUNKO0lBQ0EsT0FBTztNQUFDO01BQVE7TUFBUztJQUFJO0VBQ2pDO0VBRUEsUUFBUTtJQUNKLEtBQUssTUFBTSxZQUFZLElBQUksQ0FBQyxTQUFTLENBQUUsU0FBUyxLQUFLO0VBQ3pEO0VBRUEsTUFBTSxNQUFjLEVBQVE7SUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRztJQUNkLElBQUksQ0FBQyxJQUFJLEdBQUc7RUFDaEI7RUFFQSxLQUFLLElBQVUsRUFBUTtJQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0I7SUFDcEMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLFNBQVMsQ0FBQztFQUMvQjtFQUVBLEtBQUssSUFBWSxFQUFRO0lBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQjtJQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHO0VBQ2hCO0VBRUEsTUFBTSxLQUNGLFFBQWdCLEVBQ2hCLFNBQW1DLEVBQ3RCO0lBQ2Isc0NBQXNDO0lBQ3RDLE1BQU0sVUFBa0IsS0FBSyxPQUFPLENBQUM7SUFDckMsb0NBQW9DO0lBQ3BDLE1BQU0sY0FBa0MsT0FBTyxRQUFRLEtBQUssQ0FBQyxPQUFPO0lBQ3BFLE1BQU0sV0FBVyxNQUFNLEtBQUssSUFBSSxDQUFDO0lBQ2pDLElBQUksQ0FBQyxTQUFTLE1BQU0sSUFBSSxDQUFDLGFBQWE7TUFDbEM7SUFDSjtJQUNBLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQjtJQUNwQyxJQUFJLFdBQVc7TUFDWCxNQUFNLFFBQVEsTUFBTSxLQUFLLFFBQVEsQ0FBQztNQUNsQyxJQUFJLE1BQU0sSUFBSSxjQUFjLE1BQU0sQ0FBQztNQUNuQyxNQUFNLFVBQVU7TUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLGNBQWMsTUFBTSxDQUFDO0lBQ3pDLE9BQU87TUFDSCxNQUFNLE9BQU8sTUFBTSxLQUFLLElBQUksQ0FBQztNQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztNQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHO0lBQ2hCO0VBQ0o7QUFDSiJ9